import numpy as np

# --- Knapsack Data ---
values = np.array([60, 100, 120, 80, 30])
weights = np.array([10, 20, 30, 24, 6])
capacity = 50
n_items = len(values)

# --- CS Parameters ---
n_nests = 50
pa = 0.25
max_iter = 200
mutation_rate = 0.3

# --- Fitness with repair ---
def fitness(solution):
    sol = solution.copy()
    total_weight = np.sum(sol * weights)
    # Repair overweight solution
    while total_weight > capacity:
        ones = np.where(sol == 1)[0]
        sol[np.random.choice(ones)] = 0
        total_weight = np.sum(sol * weights)
    total_value = np.sum(sol * values)
    return total_value, sol

# --- Initialize nests ---
nests = np.random.randint(0, 2, (n_nests, n_items))
fitness_values = np.zeros(n_nests)
for i in range(n_nests):
    f, nests[i] = fitness(nests[i])
    fitness_values[i] = f

best_index = np.argmax(fitness_values)
best_nest = nests[best_index].copy()
best_fitness = fitness_values[best_index]

# --- Main Loop ---
for t in range(max_iter):
    for i in range(n_nests):
        new_solution = nests[i].copy()
        flip_mask = np.random.rand(n_items) < mutation_rate
        new_solution[flip_mask] = 1 - new_solution[flip_mask]
        new_fit, new_solution = fitness(new_solution)
        if new_fit > fitness_values[i]:
            nests[i] = new_solution
            fitness_values[i] = new_fit

    # Abandon some nests
    abandon = np.random.rand(n_nests) < pa
    for i in range(n_nests):
        if abandon[i]:
            nests[i] = np.random.randint(0, 2, n_items)
            f, nests[i] = fitness(nests[i])
            fitness_values[i] = f

    # Update best
    best_index = np.argmax(fitness_values)
    if fitness_values[best_index] > best_fitness:
        best_fitness = fitness_values[best_index]
        best_nest = nests[best_index].copy()

    if t % 10 == 0 or t == max_iter - 1:
        print(f"Iteration {t:03d} | Best Fitness = {best_fitness}")

# --- Final Output ---
print("\nBest solution found:")
print("Items selected:", best_nest)
print("Total value:", np.sum(best_nest * values))
print("Total weight:", np.sum(best_nest * weights))
